{
  "_args": [
    [
      {
        "raw": "bin-path",
        "scope": null,
        "escapedName": "bin-path",
        "name": "bin-path",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Repos\\CRM2016PowershellDevOps"
    ]
  ],
  "_from": "bin-path@latest",
  "_id": "bin-path@0.0.3",
  "_inCache": true,
  "_location": "/bin-path",
  "_npmUser": {
    "name": "timoxley",
    "email": "secoif@gmail.com"
  },
  "_npmVersion": "1.3.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bin-path",
    "scope": null,
    "escapedName": "bin-path",
    "name": "bin-path",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/bin-path/-/bin-path-0.0.3.tgz",
  "_shasum": "8ebd64efa390fff0c12063902dc445b685f2e626",
  "_shrinkwrap": null,
  "_spec": "bin-path",
  "_where": "C:\\Repos\\CRM2016PowershellDevOps",
  "author": {
    "name": "Tim Oxley"
  },
  "dependencies": {},
  "description": "Get paths to module executables",
  "devDependencies": {
    "rimraf": "2.2.0",
    "tape": "1.0.4"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "8ebd64efa390fff0c12063902dc445b685f2e626",
    "tarball": "https://registry.npmjs.org/bin-path/-/bin-path-0.0.3.tgz"
  },
  "keywords": [
    "path",
    "bin",
    "modules",
    "npm",
    "executable",
    "exec",
    "spawn"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "timoxley",
      "email": "secoif@gmail.com"
    }
  ],
  "name": "bin-path",
  "optionalDependencies": {},
  "readme": "# bin-path\n\n[![Build Status](https://travis-ci.org/timoxley/bin-path.png?branch=master)](https://travis-ci.org/timoxley/bin-path)\n\n`bin-path` gives you absolute paths to dependee modules' executable scripts\n\n## Usage\n\n```js\n// pass in require so we can resolve relative to the calling module.\nvar binPath = require('bin-path')(require)\n\nbinPath('tape', function(err, bin) {\n  if (err) return console.error(err)\n  console.log(bin)\n  // => {\"tape\":\"/Users/timoxley/Projects/find-bin/node_modules/tape/bin/tape\"}\n\n  // bin-path can also be executed syncronously:\n  var rimRafBin = binPath('rimraf')\n  console.log(rimRafBin)\n  // => { rimraf: '/Users/timoxley/Projects/find-bin/node_modules/rimraf/bin.js' })\n})\n\n```\n\n## Why\n\n1. `npm bin` will return the location of the `node_modules/.bin` directory, but it does not take\ninto account being called within the context of another module, this is\na problem because:\n2. You can't rely on `__dirname + '/node_modules/'` actually containing your\nmodule, the module may exist higher in the hierarchy due to deduping.\nIf the module does exist higher, then `node_modules/.bin` will also be\nmissing for your module.\n3. Shelling out to `npm bin` is slow anyway; it has to wait for all of\n  npm to boot up, and npm is a heavy dependency to include if all you\nwant is to get a bin path.\n4. Relying on hard paths to executables is brittle e.g. linking directly to a module's `bin/executable`. Using the\nthe `bin` field in `package.json` allows module authors to change the path ofthe actual executable\nwithout breaking dependee modules. Finding the actual path to the executable is also a problem because of\npoint 2 above.\n\n## How\n`bin-path` resolves module location, and loads `bin` \nfrom `package.json` directly, resolving to normalized, absolute paths.\n\n## Alternative Solution\n\nInvoke your modules via npm scripts (e.g. npm start), this will set up the `$PATH` to find \nexecutables correctly. This still incurs the startup time of npm though, and isn't always\npractical, for example, npm scripts cannot accept commandline parameters (though you can use\nenvironment variables largely for the same purpose).\n\n## Licence\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "version": "0.0.3"
}
